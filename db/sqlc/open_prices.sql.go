// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: open_prices.sql

package db

import (
	"context"
)

const createOpeningPrice = `-- name: CreateOpeningPrice :one
INSERT INTO open_prices (
    market,
    year_open,
    month_open,
    week_open
) VALUES (
    $1, $2, $3, $4
) RETURNING id, market, year_open, month_open, week_open, updated
`

type CreateOpeningPriceParams struct {
	Market    string  `json:"market"`
	YearOpen  float32 `json:"year_open"`
	MonthOpen float32 `json:"month_open"`
	WeekOpen  float32 `json:"week_open"`
}

func (q *Queries) CreateOpeningPrice(ctx context.Context, arg CreateOpeningPriceParams) (OpenPrice, error) {
	row := q.db.QueryRowContext(ctx, createOpeningPrice,
		arg.Market,
		arg.YearOpen,
		arg.MonthOpen,
		arg.WeekOpen,
	)
	var i OpenPrice
	err := row.Scan(
		&i.ID,
		&i.Market,
		&i.YearOpen,
		&i.MonthOpen,
		&i.WeekOpen,
		&i.Updated,
	)
	return i, err
}

const getOpeningPrice = `-- name: GetOpeningPrice :one
SELECT id, market, year_open, month_open, week_open, updated FROM open_prices
WHERE market = $1
limit 1
`

func (q *Queries) GetOpeningPrice(ctx context.Context, market string) (OpenPrice, error) {
	row := q.db.QueryRowContext(ctx, getOpeningPrice, market)
	var i OpenPrice
	err := row.Scan(
		&i.ID,
		&i.Market,
		&i.YearOpen,
		&i.MonthOpen,
		&i.WeekOpen,
		&i.Updated,
	)
	return i, err
}

const updateMonthPrice = `-- name: UpdateMonthPrice :one
UPDATE open_prices
SET month_open = $2
WHERE market = $1
RETURNING id, market, year_open, month_open, week_open, updated
`

type UpdateMonthPriceParams struct {
	Market    string  `json:"market"`
	MonthOpen float32 `json:"month_open"`
}

func (q *Queries) UpdateMonthPrice(ctx context.Context, arg UpdateMonthPriceParams) (OpenPrice, error) {
	row := q.db.QueryRowContext(ctx, updateMonthPrice, arg.Market, arg.MonthOpen)
	var i OpenPrice
	err := row.Scan(
		&i.ID,
		&i.Market,
		&i.YearOpen,
		&i.MonthOpen,
		&i.WeekOpen,
		&i.Updated,
	)
	return i, err
}

const updateWeekPrice = `-- name: UpdateWeekPrice :one
UPDATE open_prices
SET week_open = $2
WHERE market = $1
RETURNING id, market, year_open, month_open, week_open, updated
`

type UpdateWeekPriceParams struct {
	Market   string  `json:"market"`
	WeekOpen float32 `json:"week_open"`
}

func (q *Queries) UpdateWeekPrice(ctx context.Context, arg UpdateWeekPriceParams) (OpenPrice, error) {
	row := q.db.QueryRowContext(ctx, updateWeekPrice, arg.Market, arg.WeekOpen)
	var i OpenPrice
	err := row.Scan(
		&i.ID,
		&i.Market,
		&i.YearOpen,
		&i.MonthOpen,
		&i.WeekOpen,
		&i.Updated,
	)
	return i, err
}

const updateYearPrice = `-- name: UpdateYearPrice :one
UPDATE open_prices
SET year_open = $2
WHERE market = $1
RETURNING id, market, year_open, month_open, week_open, updated
`

type UpdateYearPriceParams struct {
	Market   string  `json:"market"`
	YearOpen float32 `json:"year_open"`
}

func (q *Queries) UpdateYearPrice(ctx context.Context, arg UpdateYearPriceParams) (OpenPrice, error) {
	row := q.db.QueryRowContext(ctx, updateYearPrice, arg.Market, arg.YearOpen)
	var i OpenPrice
	err := row.Scan(
		&i.ID,
		&i.Market,
		&i.YearOpen,
		&i.MonthOpen,
		&i.WeekOpen,
		&i.Updated,
	)
	return i, err
}
